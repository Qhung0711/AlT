#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ m√£ h√≥a ·∫£nh th√†nh Base64 v√† t·∫°o file JavaScript
B·∫£o v·ªá ·∫£nh kh·ªèi vi·ªác truy c·∫≠p tr·ª±c ti·∫øp khi deploy l√™n GitHub Pages
"""

import os
import base64
import json
from pathlib import Path

def encode_image_to_base64(image_path):
    """M√£ h√≥a m·ªôt ·∫£nh th√†nh Base64"""
    try:
        with open(image_path, 'rb') as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
            # X√°c ƒë·ªãnh MIME type d·ª±a tr√™n extension
            ext = image_path.suffix.lower()
            if ext in ['.jpg', '.jpeg']:
                mime_type = 'image/jpeg'
            elif ext == '.png':
                mime_type = 'image/png'
            elif ext == '.gif':
                mime_type = 'image/gif'
            elif ext == '.webp':
                mime_type = 'image/webp'
            else:
                mime_type = 'image/jpeg'  # Default
            
            return f"data:{mime_type};base64,{encoded_string}"
    except Exception as e:
        print(f"L·ªói khi m√£ h√≥a {image_path}: {e}")
        return None

def main():
    """H√†m ch√≠nh ƒë·ªÉ m√£ h√≥a t·∫•t c·∫£ ·∫£nh"""
    images_dir = Path('images')
    output_file = 'image_data.js'
    
    if not images_dir.exists():
        print("Th∆∞ m·ª•c images kh√¥ng t·ªìn t·∫°i!")
        return
    
    # L·∫•y danh s√°ch t·∫•t c·∫£ file ·∫£nh
    image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
    image_files = []
    
    for ext in image_extensions:
        image_files.extend(images_dir.glob(f'*{ext}'))
        image_files.extend(images_dir.glob(f'*{ext.upper()}'))
    
    if not image_files:
        print("Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong th∆∞ m·ª•c images!")
        return
    
    print(f"T√¨m th·∫•y {len(image_files)} file ·∫£nh")
    
    # M√£ h√≥a t·ª´ng ·∫£nh
    encoded_images = {}
    for i, image_file in enumerate(sorted(image_files)):
        print(f"ƒêang m√£ h√≥a {i+1}/{len(image_files)}: {image_file.name}")
        encoded_data = encode_image_to_base64(image_file)
        if encoded_data:
            encoded_images[image_file.name] = encoded_data
    
    # T·∫°o file JavaScript
    js_content = f"""// File n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi encode_images.py
// Ch·ª©a d·ªØ li·ªáu ·∫£nh ƒë√£ m√£ h√≥a Base64
// Kh√¥ng ch·ªânh s·ª≠a file n√†y th·ªß c√¥ng!

const imageDataBase64 = {json.dumps(encoded_images, indent=2)};

// H√†m ƒë·ªÉ l·∫•y ·∫£nh theo t√™n
function getImageData(imageName) {{
    return imageDataBase64[imageName] || null;
}}

// H√†m ƒë·ªÉ ki·ªÉm tra ·∫£nh c√≥ t·ªìn t·∫°i kh√¥ng
function hasImage(imageName) {{
    return imageName in imageDataBase64;
}}

// H√†m ƒë·ªÉ l·∫•y danh s√°ch t√™n ·∫£nh
function getImageNames() {{
    return Object.keys(imageDataBase64);
}}

// Export cho module (n·∫øu c·∫ßn)
if (typeof module !== 'undefined' && module.exports) {{
    module.exports = {{
        imageDataBase64,
        getImageData,
        hasImage,
        getImageNames
    }};
}}
"""
    
    # Ghi file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print(f"\n‚úÖ Ho√†n th√†nh! ƒê√£ m√£ h√≥a {len(encoded_images)} ·∫£nh")
    print(f"üìÅ File output: {output_file}")
    print(f"üíæ K√≠ch th∆∞·ªõc file: {os.path.getsize(output_file) / (1024*1024):.2f} MB")
    
    # T·∫°o file danh s√°ch ·∫£nh cho script.js
    image_names = list(encoded_images.keys())
    names_file = 'image_names.js'
    
    names_content = f"""// Danh s√°ch t√™n ·∫£nh ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
const imageNames = {json.dumps(image_names, indent=2)};
"""
    
    with open(names_file, 'w', encoding='utf-8') as f:
        f.write(names_content)
    
    print(f"üìù File danh s√°ch ·∫£nh: {names_file}")

if __name__ == "__main__":
    main() 